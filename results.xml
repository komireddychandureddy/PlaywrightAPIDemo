<testsuites id="" name="" tests="17" failures="2" skipped="0" errors="0" time="7.886332">
<testsuite name="api\error-handling.api.spec.js" timestamp="2025-05-23T22:49:24.393Z" hostname="api-tests" tests="3" failures="1" skipped="0" time="2.031" errors="0">
<testcase name="API Error Handling Tests @api › should handle invalid JSON payload" classname="api\error-handling.api.spec.js" time="0.65">
<failure message="error-handling.api.spec.js:5:7 should handle invalid JSON payload" type="FAILURE">
<![CDATA[  [api-tests] › api\error-handling.api.spec.js:5:7 › API Error Handling Tests @api › should handle invalid JSON payload 

    Error: expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [200, 201, 400]

      12 |     
      13 |     // JSONPlaceholder is lenient, but in real APIs this would be 400
    > 14 |     expect([200, 201, 400]).toContain(response.status());
         |                             ^
      15 |   });
      16 |
      17 |   test('should handle missing required fields', async ({ apiContext }) => {
        at C:\Users\ADMIN\git\PlaywrightAPIDemo\tests\api\error-handling.api.spec.js:14:29

    Error Context: ..\test-results\api-error-handling.api-API-2b88c-handle-invalid-JSON-payload-api-tests\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|test-results\api-error-handling.api-API-2b88c-handle-invalid-JSON-payload-api-tests\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="API Error Handling Tests @api › should handle missing required fields" classname="api\error-handling.api.spec.js" time="0.588">
</testcase>
<testcase name="API Error Handling Tests @api › should handle rate limiting gracefully" classname="api\error-handling.api.spec.js" time="0.793">
</testcase>
</testsuite>
<testsuite name="api\integration.api.spec.js" timestamp="2025-05-23T22:49:24.393Z" hostname="api-tests" tests="2" failures="1" skipped="0" time="1.18" errors="0">
<testcase name="API Integration Tests @api › should create user and their posts workflow" classname="api\integration.api.spec.js" time="0.629">
<failure message="integration.api.spec.js:5:7 should create user and their posts workflow" type="FAILURE">
<![CDATA[  [api-tests] › api\integration.api.spec.js:5:7 › API Integration Tests @api › should create user and their posts workflow 

    ReferenceError: expect is not defined

       at utils\api-helpers.js:26

      24 |     
      25 |     requiredFields.forEach(field => {
    > 26 |       expect(user).toHaveProperty(field);
         |       ^
      27 |     });
      28 |
      29 |     if (user.email) {
        at forEach (C:\Users\ADMIN\git\PlaywrightAPIDemo\tests\utils\api-helpers.js:26:7)
        at ApiHelpers.validateUserStructure (C:\Users\ADMIN\git\PlaywrightAPIDemo\tests\utils\api-helpers.js:25:20)
        at C:\Users\ADMIN\git\PlaywrightAPIDemo\tests\api\integration.api.spec.js:11:19
]]>
</failure>
</testcase>
<testcase name="API Integration Tests @api › should handle user deletion cascade" classname="api\integration.api.spec.js" time="0.551">
</testcase>
</testsuite>
<testsuite name="api\performance.api.spec.js" timestamp="2025-05-23T22:49:24.393Z" hostname="api-tests" tests="2" failures="0" skipped="0" time="0.955" errors="0">
<testcase name="API Performance Tests @api › should respond within acceptable time limits" classname="api\performance.api.spec.js" time="0.449">
</testcase>
<testcase name="API Performance Tests @api › should handle concurrent requests" classname="api\performance.api.spec.js" time="0.506">
<system-out>
<![CDATA[Concurrent requests completed in: 457ms
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="api\posts.api.spec.js" timestamp="2025-05-23T22:49:24.393Z" hostname="api-tests" tests="4" failures="0" skipped="0" time="0.725" errors="0">
<testcase name="Posts API Tests @api › should get all posts" classname="api\posts.api.spec.js" time="0.074">
</testcase>
<testcase name="Posts API Tests @api › should get posts by user" classname="api\posts.api.spec.js" time="0.298">
</testcase>
<testcase name="Posts API Tests @api › should create new post" classname="api\posts.api.spec.js" time="0.28">
</testcase>
<testcase name="Posts API Tests @api › should get post comments" classname="api\posts.api.spec.js" time="0.073">
</testcase>
</testsuite>
<testsuite name="api\users.api.spec.js" timestamp="2025-05-23T22:49:24.393Z" hostname="api-tests" tests="6" failures="0" skipped="0" time="1.1" errors="0">
<testcase name="Users API Tests @api › should get all users" classname="api\users.api.spec.js" time="0.06">
</testcase>
<testcase name="Users API Tests @api › should get user by id" classname="api\users.api.spec.js" time="0.071">
</testcase>
<testcase name="Users API Tests @api › should handle non-existent user" classname="api\users.api.spec.js" time="0.295">
</testcase>
<testcase name="Users API Tests @api › should create new user" classname="api\users.api.spec.js" time="0.271">
</testcase>
<testcase name="Users API Tests @api › should update user" classname="api\users.api.spec.js" time="0.279">
</testcase>
<testcase name="Users API Tests @api › should delete user" classname="api\users.api.spec.js" time="0.124">
</testcase>
</testsuite>
</testsuites>